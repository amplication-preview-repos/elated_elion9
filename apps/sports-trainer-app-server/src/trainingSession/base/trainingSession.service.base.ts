/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  TrainingSession as PrismaTrainingSession,
  Feedback as PrismaFeedback,
  Trainee as PrismaTrainee,
  Trainer as PrismaTrainer,
} from "@prisma/client";

export class TrainingSessionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TrainingSessionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.trainingSession.count(args);
  }

  async trainingSessions(
    args: Prisma.TrainingSessionFindManyArgs
  ): Promise<PrismaTrainingSession[]> {
    return this.prisma.trainingSession.findMany(args);
  }
  async trainingSession(
    args: Prisma.TrainingSessionFindUniqueArgs
  ): Promise<PrismaTrainingSession | null> {
    return this.prisma.trainingSession.findUnique(args);
  }
  async createTrainingSession(
    args: Prisma.TrainingSessionCreateArgs
  ): Promise<PrismaTrainingSession> {
    return this.prisma.trainingSession.create(args);
  }
  async updateTrainingSession(
    args: Prisma.TrainingSessionUpdateArgs
  ): Promise<PrismaTrainingSession> {
    return this.prisma.trainingSession.update(args);
  }
  async deleteTrainingSession(
    args: Prisma.TrainingSessionDeleteArgs
  ): Promise<PrismaTrainingSession> {
    return this.prisma.trainingSession.delete(args);
  }

  async findFeedbacks(
    parentId: string,
    args: Prisma.FeedbackFindManyArgs
  ): Promise<PrismaFeedback[]> {
    return this.prisma.trainingSession
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .feedbacks(args);
  }

  async getTrainee(parentId: string): Promise<PrismaTrainee | null> {
    return this.prisma.trainingSession
      .findUnique({
        where: { id: parentId },
      })
      .trainee();
  }

  async getTrainer(parentId: string): Promise<PrismaTrainer | null> {
    return this.prisma.trainingSession
      .findUnique({
        where: { id: parentId },
      })
      .trainer();
  }
}
