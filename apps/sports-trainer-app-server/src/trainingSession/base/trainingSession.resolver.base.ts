/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { TrainingSession } from "./TrainingSession";
import { TrainingSessionCountArgs } from "./TrainingSessionCountArgs";
import { TrainingSessionFindManyArgs } from "./TrainingSessionFindManyArgs";
import { TrainingSessionFindUniqueArgs } from "./TrainingSessionFindUniqueArgs";
import { CreateTrainingSessionArgs } from "./CreateTrainingSessionArgs";
import { UpdateTrainingSessionArgs } from "./UpdateTrainingSessionArgs";
import { DeleteTrainingSessionArgs } from "./DeleteTrainingSessionArgs";
import { FeedbackFindManyArgs } from "../../feedback/base/FeedbackFindManyArgs";
import { Feedback } from "../../feedback/base/Feedback";
import { Trainee } from "../../trainee/base/Trainee";
import { Trainer } from "../../trainer/base/Trainer";
import { TrainingSessionService } from "../trainingSession.service";
@graphql.Resolver(() => TrainingSession)
export class TrainingSessionResolverBase {
  constructor(protected readonly service: TrainingSessionService) {}

  async _trainingSessionsMeta(
    @graphql.Args() args: TrainingSessionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TrainingSession])
  async trainingSessions(
    @graphql.Args() args: TrainingSessionFindManyArgs
  ): Promise<TrainingSession[]> {
    return this.service.trainingSessions(args);
  }

  @graphql.Query(() => TrainingSession, { nullable: true })
  async trainingSession(
    @graphql.Args() args: TrainingSessionFindUniqueArgs
  ): Promise<TrainingSession | null> {
    const result = await this.service.trainingSession(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TrainingSession)
  async createTrainingSession(
    @graphql.Args() args: CreateTrainingSessionArgs
  ): Promise<TrainingSession> {
    return await this.service.createTrainingSession({
      ...args,
      data: {
        ...args.data,

        trainee: args.data.trainee
          ? {
              connect: args.data.trainee,
            }
          : undefined,

        trainer: args.data.trainer
          ? {
              connect: args.data.trainer,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => TrainingSession)
  async updateTrainingSession(
    @graphql.Args() args: UpdateTrainingSessionArgs
  ): Promise<TrainingSession | null> {
    try {
      return await this.service.updateTrainingSession({
        ...args,
        data: {
          ...args.data,

          trainee: args.data.trainee
            ? {
                connect: args.data.trainee,
              }
            : undefined,

          trainer: args.data.trainer
            ? {
                connect: args.data.trainer,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TrainingSession)
  async deleteTrainingSession(
    @graphql.Args() args: DeleteTrainingSessionArgs
  ): Promise<TrainingSession | null> {
    try {
      return await this.service.deleteTrainingSession(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Feedback], { name: "feedbacks" })
  async findFeedbacks(
    @graphql.Parent() parent: TrainingSession,
    @graphql.Args() args: FeedbackFindManyArgs
  ): Promise<Feedback[]> {
    const results = await this.service.findFeedbacks(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Trainee, {
    nullable: true,
    name: "trainee",
  })
  async getTrainee(
    @graphql.Parent() parent: TrainingSession
  ): Promise<Trainee | null> {
    const result = await this.service.getTrainee(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Trainer, {
    nullable: true,
    name: "trainer",
  })
  async getTrainer(
    @graphql.Parent() parent: TrainingSession
  ): Promise<Trainer | null> {
    const result = await this.service.getTrainer(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
