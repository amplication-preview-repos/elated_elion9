/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Trainee as PrismaTrainee,
  TrainingSession as PrismaTrainingSession,
} from "@prisma/client";

export class TraineeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.TraineeCountArgs, "select">): Promise<number> {
    return this.prisma.trainee.count(args);
  }

  async trainees(args: Prisma.TraineeFindManyArgs): Promise<PrismaTrainee[]> {
    return this.prisma.trainee.findMany(args);
  }
  async trainee(
    args: Prisma.TraineeFindUniqueArgs
  ): Promise<PrismaTrainee | null> {
    return this.prisma.trainee.findUnique(args);
  }
  async createTrainee(args: Prisma.TraineeCreateArgs): Promise<PrismaTrainee> {
    return this.prisma.trainee.create(args);
  }
  async updateTrainee(args: Prisma.TraineeUpdateArgs): Promise<PrismaTrainee> {
    return this.prisma.trainee.update(args);
  }
  async deleteTrainee(args: Prisma.TraineeDeleteArgs): Promise<PrismaTrainee> {
    return this.prisma.trainee.delete(args);
  }

  async findTrainingSessions(
    parentId: string,
    args: Prisma.TrainingSessionFindManyArgs
  ): Promise<PrismaTrainingSession[]> {
    return this.prisma.trainee
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .trainingSessions(args);
  }
}
